const express = require('express');
const http = require('http');
const { Server } = require("socket.io");
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const PORT = 8080;
const MAIN_INTERVAL = 2000; // –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å–µ—Ä–≤–µ—Ä–∞ (2 —Å–µ–∫—É–Ω–¥–∏)
const WARNING_INTERVAL = 60000; // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å (1 —Ö–≤–∏–ª–∏–Ω–∞)
const KICK_TIMEOUT = 600000; // 10 —Ö–≤–∏–ª–∏–Ω
const WARNING_TICKS = WARNING_INTERVAL / MAIN_INTERVAL; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å "—Ç—ñ–∫—ñ–≤" –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

server.on('error', (err) => console.error('[–ü–û–ú–ò–õ–ö–ê –°–ï–†–í–ï–†–ê]:', err));

app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'admin.html')));
app.get('/player.html', (req, res) => res.sendFile(path.join(__dirname, 'player.html')));

let players = {};
let gameState = 'LOBBY';
let gameZone = {
  latitude: 50.7472,
  longitude: 25.3253,
  radius: 5000,
};

function getDistance(lat1, lon1, lat2, lon2) {
    if (lat1 == null || lon1 == null || lat2 == null || lon2 == null) return 0;
    const R = 6371e3;
    const œÜ1 = lat1 * Math.PI / 180;
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) + Math.cos(œÜ1) * Math.cos(œÜ2) * Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

setInterval(() => {
    if (gameState !== 'IN_PROGRESS') return;
    
    const now = Date.now();
    Object.values(players).forEach(player => {
        if (!player || !player.location) return;

        const distance = getDistance(player.location.latitude, player.location.longitude, gameZone.latitude, gameZone.longitude);

        if (distance > gameZone.radius) {
            if (!player.isOutside) {
                player.isOutside = true;
                player.outsideSince = now;
                player.warningTickCounter = WARNING_TICKS; // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –ø–µ—Ä—à–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤—ñ–¥—Ä–∞–∑—É
            }
            
            player.warningTickCounter++;

            if (player.warningTickCounter >= WARNING_TICKS) {
                console.log(`[Warning] –ù–∞–¥—Å–∏–ª–∞—é –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é ${player.name}`);
                io.to(player.socketId).emit('zone_warning');
                player.warningTickCounter = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ö–≤–∏–ª–∏–Ω–∏
            }
            
            if (now - player.outsideSince > KICK_TIMEOUT) {
                io.to(player.socketId).emit('game_event', '–í–∏ –±—É–ª–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ –ø–æ–∑–∞ –∑–æ–Ω–æ—é —ñ –≤–∏–±—É–ª–∏ –∑ –≥—Ä–∏!');
                io.to(player.socketId).emit('game_reset');
                if (players[player.id]) delete players[player.id];
                broadcastLobbyUpdate();
            }
        } else {
            if (player.isOutside) {
                player.isOutside = false;
                player.outsideSince = null;
                player.warningTickCounter = 0;
                io.to(player.socketId).emit('game_event', '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –±–µ–∑–ø–µ—á–Ω—É –∑–æ–Ω—É!');
            }
        }
    });
    updateGameData();
}, MAIN_INTERVAL);

io.on('connection', (socket) => {
    const { isAdmin, userId } = socket.handshake.query;
    let currentUserId = userId || null;

    if (isAdmin === 'true') {
        socket.join('admins');
        console.log(`[Connect] –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è.`);
        socket.emit('game_state_update', { gameState, players: Object.values(players), zone: gameZone });
    }
    else if (currentUserId && players[currentUserId]) {
        players[currentUserId].socketId = socket.id;
        socket.join(currentUserId);
        console.log(`[Reconnect] –ì—Ä–∞–≤–µ—Ü—å '${players[currentUserId].name}' –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥—Ä—É.`);
        socket.emit('game_state_update', { gameState, players: Object.values(players), zone: gameZone });
    } 
    else if (currentUserId && !players[currentUserId]) {
        console.log(`[Invalid ID] –ì—Ä–∞–≤–µ—Ü—å –∑ –Ω–µ–¥—ñ–π—Å–Ω–∏–º ID '${currentUserId}' —Å–ø—Ä–æ–±—É–≤–∞–≤ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å. –°–∫–∏–¥–∞—î–º–æ.`);
        socket.emit('game_reset');
    }

    socket.on('join_game', (playerName, callback) => {
        if (gameState !== 'LOBBY') return callback({ success: false, message: '–ì—Ä–∞ –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—è.' });
        const newPlayerId = uuidv4();
        players[newPlayerId] = { id: newPlayerId, name: playerName, socketId: socket.id, location: null, isOutside: false, outsideSince: null, warningTickCounter: 0 };
        currentUserId = newPlayerId;
        socket.join(newPlayerId);
        console.log(`[Join] –ì—Ä–∞–≤–µ—Ü—å '${playerName}' –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è.`);
        callback({ success: true, userId: newPlayerId });
        broadcastLobbyUpdate();
    });
    
    socket.on('leave_game', () => {
        if (currentUserId && players[currentUserId]) {
            console.log(`[Leave] –ì—Ä–∞–≤–µ—Ü—å '${players[currentUserId].name}' –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É.`);
            delete players[currentUserId];
            broadcastLobbyUpdate();
        }
    });

    socket.on('update_location', (locationData) => {
        if (currentUserId && players[currentUserId]) {
            players[currentUserId].location = locationData;
        }
    });

    socket.on('admin_start_game', () => {
        if (isAdmin === 'true' && gameState === 'LOBBY') {
            gameState = 'IN_PROGRESS';
            console.log('[Admin] –ì—Ä—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ!');
            io.emit('game_started');
            setTimeout(() => updateGameData(), 500);
        }
    });

    socket.on('admin_update_zone', (newZone) => {
        if (isAdmin === 'true') {
            gameZone = newZone;
            broadcastToPlayers('force_reload', {});
        }
    });

    socket.on('admin_broadcast_message', (message) => {
        if (isAdmin === 'true') {
            broadcastToPlayers('game_event', `üó£Ô∏è [–û–ì–û–õ–û–®–ï–ù–ù–Ø] ${message}`);
        }
    });
    
    socket.on('admin_reset_game', () => {
        if (isAdmin === 'true') {
            // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∑–æ–Ω–∏ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤, —è–∫—ñ —î –≤ –ª–æ–±—ñ
            Object.values(players).forEach(p => {
                p.isOutside = false;
                p.outsideSince = null;
                p.warningTickCounter = 0;
            });
            gameState = 'LOBBY';
            console.log('[Admin] –ì—Ä—É —Å–∫–∏–Ω—É—Ç–æ. –°—Ç–∞–Ω –≥—Ä–∞–≤—Ü—ñ–≤ –æ—á–∏—â–µ–Ω–æ.');
            io.emit('game_reset'); // –ö–æ–º–∞–Ω–¥–∞ –∫–ª—ñ—î–Ω—Ç–∞–º –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –ª–æ–±—ñ
            broadcastLobbyUpdate(); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤
        }
    });

    socket.on('disconnect', () => {
        const disconnectedPlayer = Object.values(players).find(p => p.socketId === socket.id);
        if (disconnectedPlayer) {
            console.log(`[Disconnect] –ì—Ä–∞–≤–µ—Ü—å '${disconnectedPlayer.name}' —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è.`);
        } else if (isAdmin === 'true') {
            console.log(`[Disconnect] –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è.`);
        }
    });
});

function broadcastLobbyUpdate() {
    io.emit('game_state_update', { gameState, players: Object.values(players) });
}

function broadcastToPlayers(event, data) {
    Object.keys(players).forEach(pId => {
        if(players[pId] && players[pId].socketId) {
            io.to(players[pId].socketId).emit(event, data);
        }
    });
}

function updateGameData() {
    io.to('admins').emit('game_state_update', { gameState, players: Object.values(players), zone: gameZone });
    const now = Date.now();
    for (const pId in players) {
        if (players[pId] && players[pId].socketId) {
            const player = players[pId];
            const timeLeft = player.isOutside ? KICK_TIMEOUT - (now - player.outsideSince) : KICK_TIMEOUT;
            const playerData = { 
                gameState, 
                players: [player], 
                zone: gameZone, 
                zoneStatus: { 
                    isOutside: player.isOutside, 
                    timeLeft: timeLeft > 0 ? timeLeft : 0 
                }
            };
            io.to(pId).emit('game_update', playerData);
        }
    }
}

server.listen(PORT, '0.0.0.0', () => console.log(`[–°–µ—Ä–≤–µ—Ä] –°–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`));