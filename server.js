const express = require('express');
const http = require('http');
const { Server } = require("socket.io");
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const PORT = 8080;
const VIBRATION_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
const KICK_TIMEOUT = 600000; // 10 —Ö–≤–∏–ª–∏–Ω

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

server.on('error', (err) => console.error('[–ü–û–ú–ò–õ–ö–ê –°–ï–†–í–ï–†–ê]:', err));

app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'admin.html')));
app.get('/player.html', (req, res) => res.sendFile(path.join(__dirname, 'player.html')));

let players = {};
let gameState = 'LOBBY';
let gameZone = {
  latitude: 50.7472,
  longitude: 25.3253,
  radius: 5000,
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤—ñ–¥—Å—Ç–∞–Ω—ñ
function getDistance(lat1, lon1, lat2, lon2) {
    const R = 6371e3; // –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –º–µ—Ç—Ä–∞—Ö
    const œÜ1 = lat1 * Math.PI / 180;
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
              Math.cos(œÜ1) * Math.cos(œÜ2) *
              Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c; // –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å—Ç–∞–Ω—å –≤ –º–µ—Ç—Ä–∞—Ö
}

// –ì–æ–ª–æ–≤–Ω–∏–π —ñ–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª
setInterval(() => {
    if (gameState !== 'IN_PROGRESS') return;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    Object.values(players).forEach(player => {
        if (!player.location) return;

        const distance = getDistance(
            player.location.latitude, player.location.longitude,
            gameZone.latitude, gameZone.longitude
        );

        if (distance > gameZone.radius) {
            // –ì—Ä–∞–≤–µ—Ü—å –ü–û–ó–ê –∑–æ–Ω–æ—é
            if (!player.isOutside) {
                // –í—ñ–Ω —â–æ–π–Ω–æ –≤–∏–π—à–æ–≤
                player.isOutside = true;
                player.outsideSince = Date.now();
                player.lastWarningTime = 0; // –°–∫–∏–¥–∞—î–º–æ, —â–æ–± –≤—ñ–¥—Ä–∞–∑—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                console.log(`–ì—Ä–∞–≤–µ—Ü—å '${player.name}' –ø–æ–∫–∏–Ω—É–≤ –∑–æ–Ω—É.`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —á–∞—Å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–±—Ä–∞—Ü—ñ—é
            if (Date.now() - player.lastWarningTime > VIBRATION_INTERVAL) {
                io.to(player.socketId).emit('vibrate_warning');
                player.lastWarningTime = Date.now();
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —á–∞—Å –π–æ–≥–æ "–≤–∏–∫–∏–Ω—É—Ç–∏" –∑ –≥—Ä–∏
            if (Date.now() - player.outsideSince > KICK_TIMEOUT) {
                io.to(player.socketId).emit('game_event', '–í–∏ –±—É–ª–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ –ø–æ–∑–∞ –∑–æ–Ω–æ—é —ñ –≤–∏–±—É–ª–∏ –∑ –≥—Ä–∏!');
                io.to(player.socketId).emit('game_reset'); // –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –¥–æ –ª–æ–±—ñ
                delete players[player.id];
                broadcastLobbyUpdate(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö
            }

        } else {
            // –ì—Ä–∞–≤–µ—Ü—å –£ –ó–û–ù–Ü
            if (player.isOutside) {
                console.log(`–ì—Ä–∞–≤–µ—Ü—å '${player.name}' –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –∑–æ–Ω—É.`);
                player.isOutside = false;
                player.outsideSince = null;
                io.to(player.socketId).emit('game_event', '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –±–µ–∑–ø–µ—á–Ω—É –∑–æ–Ω—É!');
            }
        }
    });

    updateGameData();
}, 2000); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏

io.on('connection', (socket) => {
    const { isAdmin, userId } = socket.handshake.query;
    let currentUserId = userId || null;

    if (isAdmin === 'true') {
        socket.join('admins');
        console.log(`[Connect] –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è.`);
        socket.emit('game_state_update', { gameState, players: Object.values(players), zone: gameZone });
    }
    else if (currentUserId && players[currentUserId]) {
        console.log(`[Reconnect] –ì—Ä–∞–≤–µ—Ü—å '${players[currentUserId].name}' –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥—Ä—É.`);
        players[currentUserId].socketId = socket.id;
        socket.join(currentUserId);
        socket.emit('game_state_update', { gameState, players: Object.values(players), zone: gameZone });
    } 
    else if (currentUserId && !players[currentUserId]) {
        console.log(`[Invalid ID] –ì—Ä–∞–≤–µ—Ü—å –∑ –Ω–µ–¥—ñ–π—Å–Ω–∏–º ID '${currentUserId}' —Å–ø—Ä–æ–±—É–≤–∞–≤ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å. –°–∫–∏–¥–∞—î–º–æ.`);
        socket.emit('game_reset');
    }

    socket.on('join_game', (playerName, callback) => {
        if (gameState !== 'LOBBY') {
            return callback({ success: false, message: '–ì—Ä–∞ –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—è.' });
        }
        const newPlayerId = uuidv4();
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –≥—Ä–∞–≤—Ü—è
        players[newPlayerId] = { 
            id: newPlayerId, 
            name: playerName, 
            socketId: socket.id, 
            location: null, 
            isOutside: false, 
            outsideSince: null,
            lastWarningTime: 0 
        };
        currentUserId = newPlayerId;
        socket.join(newPlayerId);
        console.log(`[Join] –ì—Ä–∞–≤–µ—Ü—å '${playerName}' –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è.`);
        callback({ success: true, userId: newPlayerId });
        broadcastLobbyUpdate();
    });
    
    // –†–µ—à—Ç–∞ –∫–æ–¥—É –±–µ–∑ –∑–º—ñ–Ω...
    socket.on('leave_game', () => { /* ... */ });
    socket.on('update_location', (locationData) => { /* ... */ });
    socket.on('admin_start_game', () => { /* ... */ });
    socket.on('admin_update_zone', (newZone) => { /* ... */ });
    socket.on('admin_broadcast_message', (message) => { /* ... */ });
    socket.on('admin_reset_game', () => { /* ... */ });
    socket.on('disconnect', () => { /* ... */ });
});

function broadcastLobbyUpdate() { /* ... */ }
function broadcastToPlayers(event, data) { /* ... */ }
function updateGameData() { /* ... */ }

// –ó–∞–ª–∏—à–∞—î–º–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑ –∑–º—ñ–Ω
function getLeaveGameHandler(currentUserId) { return () => { if (currentUserId && players[currentUserId]) { console.log(`[Leave] –ì—Ä–∞–≤–µ—Ü—å '${players[currentUserId].name}' –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É.`); delete players[currentUserId]; broadcastLobbyUpdate(); } } }
function getUpdateLocationHandler(currentUserId) { return (locationData) => { if (currentUserId && players[currentUserId]) { players[currentUserId].location = locationData; } } }
function getAdminStartGameHandler(isAdmin) { return () => { if (isAdmin === 'true' && gameState === 'LOBBY') { gameState = 'IN_PROGRESS'; console.log('[Admin] –ì—Ä—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ!'); io.emit('game_started'); setTimeout(() => { updateGameData(); }, 500); } } }
function getAdminUpdateZoneHandler(isAdmin) { return (newZone) => { if (isAdmin === 'true') { gameZone = newZone; io.emit('force_reload'); } } }
function getAdminBroadcastMessageHandler(isAdmin) { return (message) => { if (isAdmin === 'true') { broadcastToPlayers('game_event', `üó£Ô∏è [–û–ì–û–õ–û–®–ï–ù–ù–Ø] ${message}`); } } }
function getAdminResetGameHandler(isAdmin) { return () => { if (isAdmin === 'true') { players = {}; gameState = 'LOBBY'; console.log('[Admin] –ì—Ä—É —Å–∫–∏–Ω—É—Ç–æ, –ª–æ–±—ñ –æ—á–∏—â–µ–Ω–æ.'); io.emit('game_reset'); broadcastLobbyUpdate(); } } }
function getDisconnectHandler(socket, isAdmin) { return () => { const disconnectedPlayer = Object.values(players).find(p => p.socketId === socket.id); if (disconnectedPlayer) { console.log(`[Disconnect] –ì—Ä–∞–≤–µ—Ü—å '${disconnectedPlayer.name}' —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è.`); } else if (isAdmin === 'true') { console.log(`[Disconnect] –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è.`); } } }

server.listen(PORT, '0.0.0.0', () => console.log(`[–°–µ—Ä–≤–µ—Ä] –°–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`));